
import numpy
from keras.models import Sequential
from keras.layers import Dense, Activation
from sklearn.model_selection import KFold,StratifiedKFold

X = [[1, 2, 3, 4, 6, 7, 8, 945, 3, 4, 57,23,123,12,31,23,123,123,4,3,545,56,856,98,9,8799],[1, 2, 3, 4, 6, 7, 8, 945, 3, 4, 57,23,123,12,31,23,123,123,4,3,545,56,856,98,9,8799],[1, 2, 3, 4, 6, 7, 8, 945, 3, 4, 57,23,123,12,31,23,123,123,4,3,545,56,856,98,9,8799],[1, 2, 3, 4, 6, 7, 8, 945, 3, 4, 57,23,123,12,31,23,123,123,4,3,545,56,856,98,9,8799],[1, 2, 3, 4, 6, 7, 8, 945, 3, 4, 57,23,123,12,31,23,123,123,4,3,545,56,856,98,9,8799],[1, 2, 3, 4, 6, 7, 8, 945, 3, 4, 57,23,123,12,31,23,123,123,4,3,545,56,856,98,9,8799],[1, 2, 3, 4, 6, 7, 8, 945, 3, 4, 57,23,123,12,31,23,123,123,4,3,545,56,856,98,9,8799],[1, 2, 3, 4, 6, 7, 8, 945, 3, 4, 57,23,123,12,31,23,123,123,4,3,545,56,856,98,9,8799],[1, 2, 3, 4, 6, 7, 8, 945, 3, 4, 57,23,123,12,31,23,123,123,4,3,545,56,856,98,9,8799],[1, 2, 3, 4, 6, 7, 8, 945, 3, 4, 57,23,123,12,31,23,123,123,4,3,545,56,856,98,9,8799],[1, 2, 3, 4, 6, 7, 8, 945, 3, 4, 57,23,123,12,31,23,123,123,4,3,545,56,856,98,9,8799],[1, 2, 3, 4, 6, 7, 8, 945, 3, 4, 57,23,123,12,31,23,123,123,4,3,545,56,856,98,9,8799],[1, 2, 3, 4, 6, 7, 8, 945, 3, 4, 57,23,123,12,31,23,123,123,4,3,545,56,856,98,9,8799],[1, 2, 3, 4, 6, 7, 8, 945, 3, 4, 57,23,123,12,31,23,123,123,4,3,545,56,856,98,9,8799],[1, 2, 3, 4, 6, 7, 8, 945, 3, 4, 57,23,123,12,31,23,123,123,4,3,545,56,856,98,9,8799],[1, 2, 3, 4, 6, 7, 8, 945, 3, 4, 57,23,123,12,31,23,123,123,4,3,545,56,856,98,9,8799],[1, 2, 3, 4, 6, 7, 8, 945, 3, 4, 57,23,123,12,31,23,123,123,4,3,545,56,856,98,9,8799]]

Y = [[1, 2, 3, 4, 6, 7, 8, 945, 3, 4, 57,23,123,12,31,23,123,123,4,3,545,56,856,98,9,8799],[1, 2, 3, 4, 6, 7, 8, 945, 3, 4, 57,23,123,12,31,23,123,123,4,3,545,56,856,98,9,8799],[1, 2, 3, 4, 6, 7, 8, 945, 3, 4, 57,23,123,12,31,23,123,123,4,3,545,56,856,98,9,8799],[1, 2, 3, 4, 6, 7, 8, 945, 3, 4, 57,23,123,12,31,23,123,123,4,3,545,56,856,98,9,8799],[1, 2, 3, 4, 6, 7, 8, 945, 3, 4, 57,23,123,12,31,23,123,123,4,3,545,56,856,98,9,8799],[1, 2, 3, 4, 6, 7, 8, 945, 3, 4, 57,23,123,12,31,23,123,123,4,3,545,56,856,98,9,8799],[1, 2, 3, 4, 6, 7, 8, 945, 3, 4, 57,23,123,12,31,23,123,123,4,3,545,56,856,98,9,8799],[1, 2, 3, 4, 6, 7, 8, 945, 3, 4, 57,23,123,12,31,23,123,123,4,3,545,56,856,98,9,8799],[1, 2, 3, 4, 6, 7, 8, 945, 3, 4, 57,23,123,12,31,23,123,123,4,3,545,56,856,98,9,8799],[1, 2, 3, 4, 6, 7, 8, 945, 3, 4, 57,23,123,12,31,23,123,123,4,3,545,56,856,98,9,8799],[1, 2, 3, 4, 6, 7, 8, 945, 3, 4, 57,23,123,12,31,23,123,123,4,3,545,56,856,98,9,8799],[1, 2, 3, 4, 6, 7, 8, 945, 3, 4, 57,23,123,12,31,23,123,123,4,3,545,56,856,98,9,8799],[1, 2, 3, 4, 6, 7, 8, 945, 3, 4, 57,23,123,12,31,23,123,123,4,3,545,56,856,98,9,8799],[1, 2, 3, 4, 6, 7, 8, 945, 3, 4, 57,23,123,12,31,23,123,123,4,3,545,56,856,98,9,8799],[1, 2, 3, 4, 6, 7, 8, 945, 3, 4, 57,23,123,12,31,23,123,123,4,3,545,56,856,98,9,8799],[1, 2, 3, 4, 6, 7, 8, 945, 3, 4, 57,23,123,12,31,23,123,123,4,3,545,56,856,98,9,8799],[1, 2, 3, 4, 6, 7, 8, 945, 3, 4, 57,23,123,12,31,23,123,123,4,3,545,56,856,98,9,8799]]

Z = []
kfold = StratifiedKFold(n_splits=10, shuffle=True, random_state=1024)
cvscores = []
for train, test in kfold.split(X, Y):
  # create model
	model = Sequential()
	model.add(Dense(12, input_dim=8, activation='relu'))
	model.add(Dense(8, activation='relu'))
	model.add(Dense(1, activation='sigmoid'))
	# Compile model
	model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])
	# Fit the model
	model.fit(X[train], Y[train], epochs=150, batch_size=10, verbose=0)
	# evaluate the model
	scores = model.evaluate(X[test], Y[test], verbose=0)
	print("%s: %.2f%%" % (model.metrics_names[1], scores[1]*100))
	cvscores.append(scores[1] * 100)
print("%.2f%% (+/- %.2f%%)" % (numpy.mean(cvscores), numpy.std(cvscores)))
